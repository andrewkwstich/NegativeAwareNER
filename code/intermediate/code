{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0a505fea-9579-43f5-9268-3083bbdc2fe4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting en-core-web-sm==3.2.0\n",
      "  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.2.0/en_core_web_sm-3.2.0-py3-none-any.whl (13.9 MB)\n",
      "Requirement already satisfied: spacy<3.3.0,>=3.2.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from en-core-web-sm==3.2.0) (3.2.3)\n",
      "Requirement already satisfied: srsly<3.0.0,>=2.4.1 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (2.4.2)\n",
      "Requirement already satisfied: pathy>=0.3.5 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (0.6.1)\n",
      "Requirement already satisfied: thinc<8.1.0,>=8.0.12 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (8.0.13)\n",
      "Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (2.0.6)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (3.0.3)\n",
      "Requirement already satisfied: requests<3.0.0,>=2.13.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (2.27.1)\n",
      "Requirement already satisfied: blis<0.8.0,>=0.4.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (0.7.5)\n",
      "Requirement already satisfied: preshed<3.1.0,>=3.0.2 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (3.0.6)\n",
      "Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (3.3.0)\n",
      "Requirement already satisfied: setuptools in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (60.5.0)\n",
      "Requirement already satisfied: cymem<2.1.0,>=2.0.2 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (2.0.6)\n",
      "Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (1.0.6)\n",
      "Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (0.9.0)\n",
      "Requirement already satisfied: typer<0.5.0,>=0.3.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (0.4.0)\n",
      "Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (1.0.1)\n",
      "Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (4.62.3)\n",
      "Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.8 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (3.0.8)\n",
      "Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (1.8.2)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (21.3)\n",
      "Requirement already satisfied: numpy>=1.15.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (1.22.1)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from packaging>=20.0->spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (3.0.7)\n",
      "Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from pathy>=0.3.5->spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (5.2.1)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4->spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (4.0.1)\n",
      "Requirement already satisfied: charset-normalizer~=2.0.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from requests<3.0.0,>=2.13.0->spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (2.0.10)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from requests<3.0.0,>=2.13.0->spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (3.3)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from requests<3.0.0,>=2.13.0->spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (1.26.8)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from requests<3.0.0,>=2.13.0->spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (2021.10.8)\n",
      "Requirement already satisfied: colorama in c:\\users\\andre\\miniconda3\\lib\\site-packages (from tqdm<5.0.0,>=4.38.0->spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (0.4.4)\n",
      "Requirement already satisfied: click<9.0.0,>=7.1.1 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from typer<0.5.0,>=0.3.0->spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (8.0.3)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\andre\\miniconda3\\lib\\site-packages (from jinja2->spacy<3.3.0,>=3.2.0->en-core-web-sm==3.2.0) (2.0.1)\n",
      "âœ” Download and installation successful\n",
      "You can now load the package via spacy.load('en_core_web_sm')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Ignoring invalid distribution -orch (c:\\users\\andre\\miniconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -orch (c:\\users\\andre\\miniconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -orch (c:\\users\\andre\\miniconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -orch (c:\\users\\andre\\miniconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -orch (c:\\users\\andre\\miniconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -orch (c:\\users\\andre\\miniconda3\\lib\\site-packages)\n"
     ]
    }
   ],
   "source": [
    "from gensim.models.keyedvectors import KeyedVectors\n",
    "from scipy.spatial import distance\n",
    "import numpy as np\n",
    "import spacy\n",
    "from collections import Counter\n",
    "!spacy download en_core_web_sm\n",
    "nlp = spacy.load(\"en_core_web_sm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7a606607-b512-4176-a0a3-09a63ae36df7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cosine_similarity(first_word, second_word):\n",
    "    return 1 - distance.cosine(first_word, second_word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ddb35602-f923-4554-a9eb-40d27655c75d",
   "metadata": {},
   "outputs": [],
   "source": [
    "glove_vectors = KeyedVectors.load_word2vec_format(\"glove-wiki-gigaword-300.gz\", binary=False)  # Make sure to download vectors first"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "74340cb5-0515-4bcc-bd3f-7ced1647a9ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gensim.downloader as api\n",
    "glove_vectors = api.load(\"glove-wiki-gigaword-50\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b22f9a8b-3b85-492b-b289-15cd8a217505",
   "metadata": {},
   "outputs": [],
   "source": [
    "dpt_store_words = [\"clothing\", \"technology\", \"appliances\", \"homeware\", \"shoes\", \"accessories\", \"gifts\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cc490b3c-e995-42c3-b352-8fd651f2f289",
   "metadata": {},
   "outputs": [],
   "source": [
    "dpt_store_centroid = np.zeros(300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9c6f4fb7-6edd-4f52-acf4-f64edefaa2c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "for word in dpt_store_words:\n",
    "    dpt_store_centroid += glove_vectors[word]\n",
    "    \n",
    "dpt_store_centroid /= len(dpt_store_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1fed7d1d-1ac0-4f4d-9760-72211936eb26",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"../data/taxonomy.txt\") as f:\n",
    "    products = f.read().splitlines()[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "471108e4-eefe-4c8b-9710-2ba119f3ba26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Animals & Pet Supplies\n",
      "Apparel & Accessories\n",
      "Arts & Entertainment\n",
      "Baby & Toddler\n",
      "Business & Industrial\n",
      "Cameras & Optics\n",
      "Electronics\n",
      "Food, Beverages & Tobacco\n",
      "Furniture\n",
      "Hardware\n",
      "Health & Beauty\n",
      "Home & Garden\n",
      "Luggage & Bags\n",
      "Mature\n",
      "Media\n",
      "Office Supplies\n",
      "Religious & Ceremonial\n",
      "Software\n",
      "Sporting Goods\n",
      "Toys & Games\n",
      "Vehicles & Parts\n"
     ]
    }
   ],
   "source": [
    "top_taxons = set()\n",
    "for product in products:\n",
    "    top_taxon = product.split(\">\")[0]\n",
    "    if top_taxon[-1] == \" \":\n",
    "        top_taxon = top_taxon[:-1]\n",
    "    if top_taxon not in top_taxons:\n",
    "        top_taxons.add(top_taxon)\n",
    "        print(top_taxon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "db2f9138-86d4-4c1b-b5da-b0baa2e43e00",
   "metadata": {},
   "outputs": [],
   "source": [
    "unneeded_categories = {\"Mature\",     # Add any other categories not reflective of the real product list\n",
    "                       \"Vehicles & Parts\",\n",
    "                       \"Arts & Entertainment\",\n",
    "                       \"Cameras & Optics\",\n",
    "                       \"Religious & Ceremonial\",\n",
    "                       \"Vehicles & Parts\",\n",
    "                       \"Animals and Pet Supplies\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5996a42f-92de-4b7d-9f0a-c563da9d174c",
   "metadata": {},
   "outputs": [],
   "source": [
    "top_taxons -= unneeded_categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3ece4410-f95f-4ee2-a1bd-eb91b3582f68",
   "metadata": {},
   "outputs": [],
   "source": [
    "taxon_dict = {}\n",
    "\n",
    "for taxon in top_taxons:\n",
    "    taxon_dict[taxon] = {}\n",
    "    taxon_dict[taxon][\"counter\"] = Counter()\n",
    "    taxon_dict[taxon][\"glove_vector\"] = np.zeros(300)\n",
    "    taxon_dict[taxon][\"total_count\"] = 0\n",
    "\n",
    "total = 0\n",
    "\n",
    "for taxon in products:\n",
    "    top_taxon = taxon.split(\">\")[0]\n",
    "    if top_taxon[-1] == \" \":\n",
    "        top_taxon = top_taxon[:-1]\n",
    "    if top_taxon in top_taxons:\n",
    "        taxon = list(set(taxon.replace(\"&\", \"\").replace(\">\", \"\").split()))\n",
    "        for word in taxon:\n",
    "            word = nlp(word)[0].lemma_\n",
    "            if taxon_dict[top_taxon][\"counter\"][word] <= 10:\n",
    "                if word in glove_vectors and cosine_similarity(dpt_store_centroid, glove_vectors[word]) > 0.1:\n",
    "                    taxon_dict[top_taxon][\"counter\"][word] += 1\n",
    "                    taxon_dict[top_taxon][\"total_count\"] += 1\n",
    "                    taxon_dict[top_taxon][\"glove_vector\"] += glove_vectors[word]\n",
    "\n",
    "for taxon in taxon_dict:\n",
    "    taxon_dict[taxon][\"glove_vector\"] /= taxon_dict[taxon][\"total_count\"]\n",
    "    taxon_dict[taxon] = taxon_dict[taxon][\"glove_vector\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bd079a1-e020-4bf6-8cf2-6240c888d6e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_taxon_dict = {}\n",
    "\n",
    "for k, v in taxon_dict.items():\n",
    "    new_taxon_dict[k] = list(v)\n",
    "\n",
    "new_taxon_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c748499-5152-4f83-88c5-ba7d351ff40a",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"dpt_store_centroids.txt\", 'w') as f:\n",
    "    f.write(\"{\")\n",
    "    for key, value in new_taxon_dict.items(): \n",
    "        f.write('\"%s\":%s,\\n' % (key, value))\n",
    "    f.write(\"}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f7d44b9-8c03-44b9-82ff-807b1bae5b1a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
